{"ast":null,"code":"import { solution, unicodeSplit } from './words';\nexport const getStatuses = guesses => {\n  const charObj = {};\n  const splitSolution = unicodeSplit(solution);\n  guesses.forEach(word => {\n    unicodeSplit(word).forEach((letter, i) => {\n      if (letter === splitSolution[i]) {\n        //make status correct\n        return charObj[letter] = 'correct';\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return charObj[letter] = 'present';\n      }\n    });\n  });\n  return charObj;\n};\nexport const getGuessStatuses = guess => {\n  const splitSolution = unicodeSplit(solution);\n  const splitGuess = unicodeSplit(guess);\n  const solutionCharsTaken = splitSolution.map(_ => false);\n  const statuses = Array.from(Array(guess.length)); // handle all correct cases first\n\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct';\n      solutionCharsTaken[i] = true;\n      return;\n    }\n  });\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return;\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent';\n      return;\n    } // now we are left with \"present\"s\n\n\n    const indexOfPresentChar = splitSolution.findIndex((x, index) => x === letter && !solutionCharsTaken[index]);\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present';\n      solutionCharsTaken[indexOfPresentChar] = true;\n      return;\n    } else {\n      statuses[i] = 'absent';\n      return;\n    }\n  });\n  return statuses;\n};","map":{"version":3,"sources":["/Users/abdirahman/proximle/react-wordle/src/lib/statuses.ts"],"names":["solution","unicodeSplit","getStatuses","guesses","charObj","splitSolution","forEach","word","letter","i","getGuessStatuses","guess","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","includes","indexOfPresentChar","findIndex","x","index"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,SAAvC;AAIA,OAAO,MAAMC,WAAW,GACtBC,OADyB,IAES;AAClC,QAAMC,OAAsC,GAAG,EAA/C;AACA,QAAMC,aAAa,GAAGJ,YAAY,CAACD,QAAD,CAAlC;AAEAG,EAAAA,OAAO,CAACG,OAAR,CAAiBC,IAAD,IAAU;AACxBN,IAAAA,YAAY,CAACM,IAAD,CAAZ,CAAmBD,OAAnB,CAA2B,CAACE,MAAD,EAASC,CAAT,KAAe;AAExC,UAAID,MAAM,KAAKH,aAAa,CAACI,CAAD,CAA5B,EAAiC;AAC/B;AACA,eAAQL,OAAO,CAACI,MAAD,CAAP,GAAkB,SAA1B;AACD;;AAED,UAAIJ,OAAO,CAACI,MAAD,CAAP,KAAoB,SAAxB,EAAmC;AACjC;AACA,eAAQJ,OAAO,CAACI,MAAD,CAAP,GAAkB,SAA1B;AACD;AACF,KAXD;AAYD,GAbD;AAeA,SAAOJ,OAAP;AACD,CAtBM;AAwBP,OAAO,MAAMM,gBAAgB,GAAIC,KAAD,IAAiC;AAC/D,QAAMN,aAAa,GAAGJ,YAAY,CAACD,QAAD,CAAlC;AACA,QAAMY,UAAU,GAAGX,YAAY,CAACU,KAAD,CAA/B;AAEA,QAAME,kBAAkB,GAAGR,aAAa,CAACS,GAAd,CAAmBC,CAAD,IAAO,KAAzB,CAA3B;AAEA,QAAMC,QAAsB,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACN,KAAK,CAACQ,MAAP,CAAhB,CAA/B,CAN+D,CAQ/D;;AACAP,EAAAA,UAAU,CAACN,OAAX,CAAmB,CAACE,MAAD,EAASC,CAAT,KAAe;AAChC,QAAID,MAAM,KAAKH,aAAa,CAACI,CAAD,CAA5B,EAAiC;AAC/BO,MAAAA,QAAQ,CAACP,CAAD,CAAR,GAAc,SAAd;AACAI,MAAAA,kBAAkB,CAACJ,CAAD,CAAlB,GAAwB,IAAxB;AACA;AACD;AACF,GAND;AAQAG,EAAAA,UAAU,CAACN,OAAX,CAAmB,CAACE,MAAD,EAASC,CAAT,KAAe;AAChC,QAAIO,QAAQ,CAACP,CAAD,CAAZ,EAAiB;;AAEjB,QAAI,CAACJ,aAAa,CAACe,QAAd,CAAuBZ,MAAvB,CAAL,EAAqC;AACnC;AACAQ,MAAAA,QAAQ,CAACP,CAAD,CAAR,GAAc,QAAd;AACA;AACD,KAP+B,CAShC;;;AACA,UAAMY,kBAAkB,GAAGhB,aAAa,CAACiB,SAAd,CACzB,CAACC,CAAD,EAAIC,KAAJ,KAAcD,CAAC,KAAKf,MAAN,IAAgB,CAACK,kBAAkB,CAACW,KAAD,CADxB,CAA3B;;AAIA,QAAIH,kBAAkB,GAAG,CAAC,CAA1B,EAA6B;AAC3BL,MAAAA,QAAQ,CAACP,CAAD,CAAR,GAAc,SAAd;AACAI,MAAAA,kBAAkB,CAACQ,kBAAD,CAAlB,GAAyC,IAAzC;AACA;AACD,KAJD,MAIO;AACLL,MAAAA,QAAQ,CAACP,CAAD,CAAR,GAAc,QAAd;AACA;AACD;AACF,GAtBD;AAwBA,SAAOO,QAAP;AACD,CA1CM","sourcesContent":["import { solution, unicodeSplit } from './words'\n\nexport type CharStatus = 'far1' | 'far2' | 'close3' | 'close2' | 'close1' | 'correct' | 'present' | 'absent'\n\nexport const getStatuses = (\n  guesses: string[]\n): { [key: string]: CharStatus } => {\n  const charObj: { [key: string]: CharStatus } = {}\n  const splitSolution = unicodeSplit(solution)\n\n  guesses.forEach((word) => {\n    unicodeSplit(word).forEach((letter, i) => {\n\n      if (letter === splitSolution[i]) {\n        //make status correct\n        return (charObj[letter] = 'correct')\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return (charObj[letter] = 'present')\n      }\n    })\n  })\n\n  return charObj\n}\n\nexport const getGuessStatuses = (guess: string): CharStatus[] => {\n  const splitSolution = unicodeSplit(solution)\n  const splitGuess = unicodeSplit(guess)\n\n  const solutionCharsTaken = splitSolution.map((_) => false)\n\n  const statuses: CharStatus[] = Array.from(Array(guess.length))\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct'\n      solutionCharsTaken[i] = true\n      return\n    }\n  })\n\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent'\n      return\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex(\n      (x, index) => x === letter && !solutionCharsTaken[index]\n    )\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present'\n      solutionCharsTaken[indexOfPresentChar] = true\n      return\n    } else {\n      statuses[i] = 'absent'\n      return\n    }\n  })\n\n  return statuses\n}\n"]},"metadata":{},"sourceType":"module"}